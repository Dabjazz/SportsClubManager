package presentation.forms.member;

import com.ServiceNotAvailableException;
import com.contract.IUseCaseControllerFactory;
import contract.dto.IMemberDto;
import contract.useCaseController.*;
import javax.swing.JPanel;
import presentation.basics.*;

/**
 * @author Lucia
 */
public class NewMemberForm
        extends AbstractMainForm {
    //   private boolean dataExists;
//    private boolean adminPermission;

    IUseCaseControllerFactory controllerFactory;
    INewMemberController controller;
    IMemberDto user;
    // List<IRoleDto> roles;
    //IAddressDto address;
    // ICountryDto country;
    //  IClubTeamDto clubTeam;
    // private List<ITypeOfSportDto> typeOfSports;
//    private List<ITypeOfSportDto> availableSports;
//    private List<ITypeOfSportDto> selectedSports = new LinkedList<>();
//    private List<IClubTeamDto> selectedTrainerTeams;
//    private List<IClubTeamDto> selectedPlayerTeams;
    // private List<IMemberDto> matchingMembers;

    /**
     * Creates new form SearchMemb
     */
    public NewMemberForm(AbstractForm form, IUseCaseControllerFactory controllerFactory, IMemberDto user)
            throws ServiceNotAvailableException {
        super(form);
        this.controllerFactory = controllerFactory;
        this.user = user;
        controller = this.controllerFactory.getNewMemberController();
        initComponents();

        personDataPanel1.setController(this.controllerFactory.getAddressController());
        membershipDataPanel2.setController(this.controllerFactory.getMembershipController());
        //availableSports = controller.getTypeOfSports();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        paneSearch = new javax.swing.JPanel();
        btnApplyChange = new javax.swing.JButton();
        membershipDataPanel2 = new presentation.forms.member.MembershipDataPanel();
        personDataPanel1 = new presentation.forms.member.PersonDataPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(848, 549));

        btnApplyChange.setText("Apply");
        btnApplyChange.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnApplyChangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSearchLayout = new javax.swing.GroupLayout(paneSearch);
        paneSearch.setLayout(paneSearchLayout);
        paneSearchLayout.setHorizontalGroup(
            paneSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSearchLayout.createSequentialGroup()
                .addGroup(paneSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSearchLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(personDataPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE))
                    .addComponent(membershipDataPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(paneSearchLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnApplyChange, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paneSearchLayout.setVerticalGroup(
            paneSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(personDataPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(membershipDataPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnApplyChange)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyChangeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnApplyChangeActionPerformed
    {//GEN-HEADEREND:event_btnApplyChangeActionPerformed
        save();
        //TODO: Throw exception in case of an error !!!!!        
    }//GEN-LAST:event_btnApplyChangeActionPerformed

    //  private void btnAddSportActionPerformed(java.awt.event.ActionEvent evt)
    //  {
//        try
//        {
//            if (radioTrainer.isSelected() || radioPlayer.isSelected())
//            {
//                //open new frame which enables selection of more sports
//                new SelectSportsHelper(availableSports, selectedSports, this);
//            }
//            else
//            {
//                JOptionPane.showMessageDialog(null, "Member is no player or trainer!");
//            }
//        }
//        catch (Exception e)
//        {
//            JOptionPane.showMessageDialog(null, "Service currently not available. Sorry!");
//        }
//    }
    // private void btnTeamsActionPerformed(java.awt.event.ActionEvent evt)
    //  {
//        try
//        {
//            new SelectTeamsHelper(selectedSports, this, false);
//        }
//        catch (Exception e)
//        {
//            JOptionPane.showMessageDialog(null, "Service currently not available. Sorry!");
//        }
//    }
//
//    public void setTxtFieldSports(List<ITypeOfSportDto> selection)
//    {
//        if (selection.isEmpty())
//        {
//            txtFieldSports.setText("");
//            return;
//        }
//
//        this.selectedSports = selection;
//
//        StringBuilder sb = new StringBuilder(selectedSports.size());
//        for (ITypeOfSportDto s : selectedSports)
//        {
//            sb.append(s);
//            sb.append(", ");
//        }
//
//        txtFieldSports.setText(sb.toString().substring(sb.length() - 2, sb.length()));
    //  }
//    private void updateDetailPane()
//    {
//        dataExists = true;
//
//        IMemberDto selectedMember = controller.getSelectedMember();
//
//
//        txtfieldMemberNr.setText(member.getId().toString());
//        dateEntry.setDate(member.getMemberFrom());
//    }
    private void save() {
        IMemberDto selectedMember = personDataPanel1.getMember();
        IMemberDto anotherSelectedMember = membershipDataPanel2.getMember();

        if (anotherSelectedMember == null) {
            selectedMember.setMemberFrom(anotherSelectedMember.getMemberFrom());

            // Wird vielleicht mal ben√∂tigt selectedMember.setMemberTo(anotherSelectedMember.getMemberTo());
            selectedMember.setRoleList(anotherSelectedMember.getRoleList());
        }
        controller.setNewMember(selectedMember, personDataPanel1.getAddress());
    }

//    public List<IClubTeamDto> getClubTeams(ITypeOfSportDto sport)
//    {
//        return controller.getClubTeamsByTypeOfSport(sport);
//    }
    public JPanel getPanel() {
        return paneSearch;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplyChange;
    private presentation.forms.member.MembershipDataPanel membershipDataPanel2;
    private javax.swing.JPanel paneSearch;
    private presentation.forms.member.PersonDataPanel personDataPanel1;
    // End of variables declaration//GEN-END:variables
}
