package presentation.forms.competition;

import com.contract.IUseCaseControllerFactory;
import com.ServiceNotAvailableException;
import contract.dto.*;
import contract.dto.classes.*;
import contract.useCaseController.IAddMatchResultsController;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import presentation.basics.AbstractForm;
import presentation.basics.AbstractMainForm;

/**
 *
 * @author Lucia
 */
public class AddCompetitionResultsForm
        extends AbstractMainForm {

    IUseCaseControllerFactory client;
    IAddMatchResultsController controller;
    ICompetitionDto competition;
    ITeamDto team;
    IMatchDto match;
    List<ITeamDto> teamList;
    List<IMatchDto> matchList;
    IMemberDto user;

    /**
     * Creates new form MatchResultEntr
     */
    public AddCompetitionResultsForm(AbstractForm form, IUseCaseControllerFactory client, IMemberDto user)
            throws ServiceNotAvailableException {
        super(form);
        this.client = client;
        this.user = user;
        controller = this.client.getAddMatchResultsController();
        initComponents();
        
        String[] neededRoles = {"DepartmentHead", "Admin", "Trainer"};
        if(!hasRole(neededRoles)){
            this.paneMatchResults.removeAll();
            JOptionPane.showMessageDialog(null, "Sorry, you do not have the permission to enter this area!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneMatchResults = new javax.swing.JPanel();
        comboCompetition = new javax.swing.JComboBox();
        lblSelectCompetition = new javax.swing.JLabel();
        scrollMatch = new javax.swing.JScrollPane();
        listMatches = new javax.swing.JList();
        lblMatch = new javax.swing.JLabel();
        spinTeamA = new javax.swing.JSpinner();
        spinTeamB = new javax.swing.JSpinner();
        txtfieldTeamA = new javax.swing.JTextField();
        lblVS = new javax.swing.JLabel();
        textfieldTeamB = new javax.swing.JTextField();
        btnAddResult = new javax.swing.JButton();
        lblTeam = new javax.swing.JLabel();
        comboTeams = new javax.swing.JComboBox();
        btnShow = new javax.swing.JButton();
        btnAddTeamFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Match Results");
        setMinimumSize(new java.awt.Dimension(848, 549));

        paneMatchResults.setMinimumSize(new java.awt.Dimension(848, 549));
        paneMatchResults.setPreferredSize(new java.awt.Dimension(848, 549));

        comboCompetition.setModel(new javax.swing.DefaultComboBoxModel(getAllCompetitions()));

        lblSelectCompetition.setText("Select Competition");

        listMatches.setModel(new javax.swing.AbstractListModel() {
            Object[] objects = { "" };
            public int getSize() { return objects.length; }
            public Object getElementAt(int i) { return objects[i]; }
        });
        listMatches.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listMatchesValueChanged(evt);
            }
        });
        scrollMatch.setViewportView(listMatches);

        lblMatch.setText("Match");

        txtfieldTeamA.setEditable(false);

        lblVS.setText(":");

        textfieldTeamB.setEditable(false);

        btnAddResult.setText("Add Result");
        btnAddResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddResultActionPerformed(evt);
            }
        });

        lblTeam.setText("Team");

        comboTeams.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));

        btnShow.setText("Show Matches");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnAddTeamFilter.setText("Find Team");
        btnAddTeamFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTeamFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneMatchResultsLayout = new javax.swing.GroupLayout(paneMatchResults);
        paneMatchResults.setLayout(paneMatchResultsLayout);
        paneMatchResultsLayout.setHorizontalGroup(
            paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneMatchResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneMatchResultsLayout.createSequentialGroup()
                        .addGroup(paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSelectCompetition)
                            .addComponent(lblMatch)
                            .addComponent(lblTeam))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(paneMatchResultsLayout.createSequentialGroup()
                                .addComponent(comboCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnShow))
                            .addGroup(paneMatchResultsLayout.createSequentialGroup()
                                .addGroup(paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(comboTeams, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(scrollMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddTeamFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(paneMatchResultsLayout.createSequentialGroup()
                        .addComponent(txtfieldTeamA, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinTeamA, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblVS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinTeamB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldTeamB, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddResult)))
                .addContainerGap(243, Short.MAX_VALUE))
        );
        paneMatchResultsLayout.setVerticalGroup(
            paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneMatchResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectCompetition)
                    .addComponent(comboCompetition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTeam)
                    .addComponent(comboTeams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddTeamFilter))
                .addGap(11, 11, 11)
                .addGroup(paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMatch)
                    .addComponent(scrollMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(paneMatchResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfieldTeamA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinTeamA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVS)
                    .addComponent(spinTeamB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textfieldTeamB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddResult))
                .addGap(205, 205, 205))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneMatchResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(paneMatchResults, javax.swing.GroupLayout.PREFERRED_SIZE, 547, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listMatchesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listMatchesValueChanged
        match = (IMatchDto)listMatches.getSelectedValue();
        txtfieldTeamA.setText(controller.getTeam(match.getHometeam()).getName());
        textfieldTeamB.setText(controller.getTeam(match.getForeignteam()).getName());
    }//GEN-LAST:event_listMatchesValueChanged

    private void btnAddResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddResultActionPerformed
        IMatchresultDto result = new MatchresultDto();
        result.setPointsHometeam(new Double(spinTeamA.getValue().toString()));
        result.setPointsForeignteam(new Double(spinTeamB.getValue().toString()));
        result.setFinal(true);

        controller.setMatchResult(match, result); //TODO: Throws error
    }//GEN-LAST:event_btnAddResultActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        competition = (ICompetitionDto) comboCompetition.getSelectedItem();

        matchList = controller.getMatchList(competition.getMatchList());
        teamList = controller.getTeamList(competition.getTeamList());

        setListMatches();
        setComboTeams();
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnAddTeamFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTeamFilterActionPerformed
        team = (ITeamDto) comboTeams.getSelectedItem();
        matchList = controller.getMatchList(team.getMatchList());
        setListMatches(matchList);

    }//GEN-LAST:event_btnAddTeamFilterActionPerformed
    
    private Object[] getAllCompetitions() {
        List<ICompetitionDto> compList = controller.getCompetitionList();
        return compList.toArray();
    }

    private Object[] getTeams() {
        return teamList.toArray();
    }

    private void setComboTeams() {
        comboTeams.setModel(new DefaultComboBoxModel(getTeams()));
    }

    private void setListMatches() {
        listMatches.setModel(new AbstractListModel() {
            Object[] objects = matchList.toArray();

            @Override
            public int getSize() {
                return objects.length;
            }

            @Override
            public Object getElementAt(int i) {
                return objects[i];
            }
        });
    }

    private void setListMatches(List<IMatchDto> matches) {
        final List<IMatchDto> tmpMatches = matches;

        listMatches.setModel(new AbstractListModel() {
            Object[] objects = tmpMatches.toArray();

            @Override
            public int getSize() {
                return objects.length;
            }

            @Override
            public Object getElementAt(int i) {
                return objects[i];
            }
        });
    }
    
    private boolean hasRole(String[] roleNames) {
        List<IRoleDto> roleList = controller.getRoles(user.getId());

        for (IRoleDto r : roleList) {
            for (int i = 0; i < roleNames.length; i++) {
                if (r.getName().equals(roleNames[i])) {
                    return true;
                }
            }
        }
        return false;
    }

    public JPanel getPanel() {
        return paneMatchResults;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddResult;
    private javax.swing.JButton btnAddTeamFilter;
    private javax.swing.JButton btnShow;
    private javax.swing.JComboBox comboCompetition;
    private javax.swing.JComboBox comboTeams;
    private javax.swing.JLabel lblMatch;
    private javax.swing.JLabel lblSelectCompetition;
    private javax.swing.JLabel lblTeam;
    private javax.swing.JLabel lblVS;
    private javax.swing.JList listMatches;
    private javax.swing.JPanel paneMatchResults;
    private javax.swing.JScrollPane scrollMatch;
    private javax.swing.JSpinner spinTeamA;
    private javax.swing.JSpinner spinTeamB;
    private javax.swing.JTextField textfieldTeamB;
    private javax.swing.JTextField txtfieldTeamA;
    // End of variables declaration//GEN-END:variables
}
